import { Bill, MarketingItem } from "@/types";
import { apiSlice } from "./apiSlice";
// Ensure Bill type is correctly imported and defined from your types file or the slice where it's defined

// This type represents the data SENT FROM THE BillForm -> handleBillFormSubmit
// It omits fields generated by backend or provided contextually
type BillSubmissionData = Omit<
  Bill,
  | "id"
  | "submittedAt"
  | "submittedBy"
  | "submittedById"
  | "marketingTaskId"
  | "marketingTask"
>;

// This interface defines the complete argument structure for the useSubmitBillMutation hook
interface SubmitBillMutationArg {
  marketingTaskId: string;
  billData: BillSubmissionData; // The nested bill details object
}

export const billApiSlice = apiSlice.injectEndpoints({
  endpoints: (builder) => ({
    // --- other endpoints ---
    getAllBills: builder.query<Bill[], void>({
      query: () => "/bills",
      providesTags: (result) =>
        result
          ? [
              ...result.map(({ id }) => ({ type: "Bill" as const, id })),
              { type: "Bill", id: "LIST" },
            ]
          : [{ type: "Bill", id: "LIST" }],
    }),
    getBillById: builder.query<Bill, string>({
      query: (billId) => `/bills/${billId}`,
      providesTags: (result, error, id) => [{ type: "Bill", id }],
    }),
    getTaskBill: builder.query<Bill | null, string>({
      query: (taskId) => `/marketing/${taskId}/bill`,
      providesTags: (result, error, taskId) => [
        result
          ? { type: "Bill", id: result.id }
          : { type: "Bill", id: `TASK-${taskId}` },
        { type: "MarketingTask", id: taskId },
      ],
    }),

    // --- submitBill Mutation (Corrected Body Structure) ---
    submitBill: builder.mutation<
      Bill, // Response type
      SubmitBillMutationArg // Input type using the nested structure
    >({
      query: ({ marketingTaskId, billData }) => ({
        url: "/bills/submit", // Target endpoint
        method: "POST",
        // --- FIX HERE: Construct the body as expected by the original API ---
        body: {
          marketingTaskId: marketingTaskId, // Task ID at the top level
          billData: billData, // NEST the detailed data inside the 'billData' property
        },
        // --- END FIX ---
      }),
      // Invalidation logic remains the same
      invalidatesTags: (result, error, arg) => [
        { type: "Bill", id: "LIST" },
        result
          ? { type: "Bill", id: result.id }
          : { type: "Bill", id: `TASK-${arg.marketingTaskId}` },
        { type: "MarketingTask", id: arg.marketingTaskId },
        { type: "MarketingTask", id: "MY_LIST" },
        { type: "MarketingTask", id: "ALL_LIST" },
      ],
    }),
    // --- End submitBill Mutation ---
  }),
});

export const {
  useGetAllBillsQuery,
  useGetBillByIdQuery,
  useGetTaskBillQuery,
  useSubmitBillMutation, // Hook expects { marketingTaskId, billData: { ... } }
} = billApiSlice;
